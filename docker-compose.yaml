version: '3.8'

services:
  nginx-cache:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: nginx-cache
    restart: unless-stopped
    networks:
      - app-net
    ports:
      - "80:80"   # Frontend proxy
      - "8080:8080" # API cache endpoint
    depends_on:
      - python-backend-1
      - python-backend-2
      - python-backend-3
      - javascript-frontend
    volumes:
      - nginx-cache:/var/cache/nginx
  python-backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: python-backend-1
    restart: unless-stopped
    depends_on:
      - postgres-db
    networks:
      - app-net
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - ENABLE_DB_CACHE=True
      - DOCKER_ENV=True
  python-backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: python-backend-2
    restart: unless-stopped
    depends_on:
      - postgres-db
    networks:
      - app-net
    ports:
      - "8001:8000"
    environment:
      - PORT=8000
      - ENABLE_DB_CACHE=True
      - DOCKER_ENV=True
  python-backend-3:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: python-backend-3
    restart: unless-stopped
    depends_on:
      - postgres-db
    networks:
      - app-net
    ports:
      - "8002:8000"
    environment:
      - PORT=8000
      - ENABLE_DB_CACHE=True
      - DOCKER_ENV=True

  javascript-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: javascript-frontend
    restart: unless-stopped
    init: true
    networks:
      - app-net
    ports:
      - "3000:3000" 
    depends_on:
      - python-backend-1
      - python-backend-2
      - python-backend-3

  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    restart: unless-stopped
    networks:
      - app-net
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-net:
    driver: bridge

volumes:
  pgdata:
    driver: local
  nginx-cache:
    driver: local
